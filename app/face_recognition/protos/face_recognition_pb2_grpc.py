# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import face_recognition_pb2 as protos_dot_face__recognition__pb2


class FaceRecognitionEngineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Upload = channel.unary_unary(
                '/FaceRecognition.FaceRecognitionEngine/Upload',
                request_serializer=protos_dot_face__recognition__pb2.UploadRequest.SerializeToString,
                response_deserializer=protos_dot_face__recognition__pb2.UploadReply.FromString,
                )
        self.Search = channel.unary_unary(
                '/FaceRecognition.FaceRecognitionEngine/Search',
                request_serializer=protos_dot_face__recognition__pb2.SearchRequest.SerializeToString,
                response_deserializer=protos_dot_face__recognition__pb2.SearchReply.FromString,
                )
        self.Compare = channel.unary_unary(
                '/FaceRecognition.FaceRecognitionEngine/Compare',
                request_serializer=protos_dot_face__recognition__pb2.CompareRequest.SerializeToString,
                response_deserializer=protos_dot_face__recognition__pb2.CompareReply.FromString,
                )
        self.Update = channel.unary_unary(
                '/FaceRecognition.FaceRecognitionEngine/Update',
                request_serializer=protos_dot_face__recognition__pb2.UploadRequest.SerializeToString,
                response_deserializer=protos_dot_face__recognition__pb2.UploadReply.FromString,
                )
        self.Delete = channel.unary_unary(
                '/FaceRecognition.FaceRecognitionEngine/Delete',
                request_serializer=protos_dot_face__recognition__pb2.DeleteRequest.SerializeToString,
                response_deserializer=protos_dot_face__recognition__pb2.UploadReply.FromString,
                )
        self.Detect = channel.unary_unary(
                '/FaceRecognition.FaceRecognitionEngine/Detect',
                request_serializer=protos_dot_face__recognition__pb2.DetectRequest.SerializeToString,
                response_deserializer=protos_dot_face__recognition__pb2.DetectReply.FromString,
                )


class FaceRecognitionEngineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Upload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Compare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Detect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FaceRecognitionEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Upload': grpc.unary_unary_rpc_method_handler(
                    servicer.Upload,
                    request_deserializer=protos_dot_face__recognition__pb2.UploadRequest.FromString,
                    response_serializer=protos_dot_face__recognition__pb2.UploadReply.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=protos_dot_face__recognition__pb2.SearchRequest.FromString,
                    response_serializer=protos_dot_face__recognition__pb2.SearchReply.SerializeToString,
            ),
            'Compare': grpc.unary_unary_rpc_method_handler(
                    servicer.Compare,
                    request_deserializer=protos_dot_face__recognition__pb2.CompareRequest.FromString,
                    response_serializer=protos_dot_face__recognition__pb2.CompareReply.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=protos_dot_face__recognition__pb2.UploadRequest.FromString,
                    response_serializer=protos_dot_face__recognition__pb2.UploadReply.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=protos_dot_face__recognition__pb2.DeleteRequest.FromString,
                    response_serializer=protos_dot_face__recognition__pb2.UploadReply.SerializeToString,
            ),
            'Detect': grpc.unary_unary_rpc_method_handler(
                    servicer.Detect,
                    request_deserializer=protos_dot_face__recognition__pb2.DetectRequest.FromString,
                    response_serializer=protos_dot_face__recognition__pb2.DetectReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FaceRecognition.FaceRecognitionEngine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FaceRecognitionEngine(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Upload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FaceRecognition.FaceRecognitionEngine/Upload',
            protos_dot_face__recognition__pb2.UploadRequest.SerializeToString,
            protos_dot_face__recognition__pb2.UploadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FaceRecognition.FaceRecognitionEngine/Search',
            protos_dot_face__recognition__pb2.SearchRequest.SerializeToString,
            protos_dot_face__recognition__pb2.SearchReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Compare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FaceRecognition.FaceRecognitionEngine/Compare',
            protos_dot_face__recognition__pb2.CompareRequest.SerializeToString,
            protos_dot_face__recognition__pb2.CompareReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FaceRecognition.FaceRecognitionEngine/Update',
            protos_dot_face__recognition__pb2.UploadRequest.SerializeToString,
            protos_dot_face__recognition__pb2.UploadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FaceRecognition.FaceRecognitionEngine/Delete',
            protos_dot_face__recognition__pb2.DeleteRequest.SerializeToString,
            protos_dot_face__recognition__pb2.UploadReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Detect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/FaceRecognition.FaceRecognitionEngine/Detect',
            protos_dot_face__recognition__pb2.DetectRequest.SerializeToString,
            protos_dot_face__recognition__pb2.DetectReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
